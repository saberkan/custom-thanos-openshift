{{- if .Values.storegateway.enabled }}
apiVersion: {{ include "common.capabilities.statefulset.apiVersion" . }}
kind: StatefulSet
metadata:
  name: {{ include "common.names.fullname" . }}-storegateway
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: storegateway
spec:
  replicas: {{ .Values.storegateway.replicaCount }}
  podManagementPolicy: {{ .Values.storegateway.podManagementPolicy }}
  serviceName: {{ include "common.names.fullname" . }}-storegateway-headless
  updateStrategy:
    type: {{ .Values.storegateway.updateStrategyType }}
    {{- if (eq "OnDelete" .Values.storegateway.updateStrategyType) }}
    rollingUpdate: null
    {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: storegateway
  template:
    metadata:
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: storegateway
      annotations:
        checksum/ojbstore-configuration: {{ include (print $.Template.BasePath "/objstore-secret.yaml") . | sha256sum }}
        {{- if (include "thanos.storegateway.createConfigmap" .) }}
        checksum/storegateway-configuration: {{ include (print $.Template.BasePath "/storegateway/configmap.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.storegateway.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.storegateway.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
    spec:
      {{- include "thanos.imagePullSecrets" . | nindent 6 }}
      serviceAccount: {{ include "thanos.serviceaccount.name" (dict "component" "storegateway" "context" $) }}
      {{- if .Values.storegateway.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.storegateway.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.storegateway.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.storegateway.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.storegateway.podAffinityPreset "component" "storegateway" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.storegateway.podAntiAffinityPreset "component" "storegateway" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.storegateway.nodeAffinityPreset.type "key" .Values.storegateway.nodeAffinityPreset.key "values" .Values.storegateway.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.storegateway.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.storegateway.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.storegateway.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.storegateway.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.storegateway.priorityClassName }}
      priorityClassName: {{ .Values.storegateway.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.storegateway.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.storegateway.securityContext.fsGroup }}
      {{- end }}
      {{- if and .Values.volumePermissions.enabled .Values.storegateway.persistence.enabled }}
      initContainers:
        - name: init-chmod-data
          image: {{ include "thanos.volumePermissions.image" . }}
          imagePullPolicy: {{ .Values.volumePermissions.image.pullPolicy | quote }}
          command:
            - sh
            - -c
            - |
              mkdir -p /data
              chown -R "{{ .Values.storegateway.securityContext.runAsUser }}:{{ .Values.storegateway.securityContext.fsGroup }}" /data
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /data
      {{- end }}
      containers:
        - name: storegateway
          image: {{ include "thanos.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          {{- if .Values.storegateway.securityContext.enabled }}
          securityContext:
            runAsUser: {{ .Values.storegateway.securityContext.runAsUser }}
          {{- end }}
          args:
            - store
            - --log.level={{ .Values.storegateway.logLevel }}
            - --grpc-address=0.0.0.0:10901
            - --http-address=0.0.0.0:10902
            - --data-dir=/data
            - --objstore.config-file=/conf/objstore.yml
            {{- if .Values.indexCacheConfig }}
            - --index-cache.config-file=/conf/index-cache.yml
            {{- end }}
            {{- if .Values.bucketCacheConfig }}
            - --store.caching-bucket.config-file=/conf/bucket-cache.yml
            {{- end }}
            {{- if or .Values.storegateway.config .Values.storegateway.existingConfigmap }}
            - --index-cache.config-file=/conf/cache/config.yml
            {{- end }}
            {{- if or .Values.storegateway.grpc.tls.enabled }}
            - --grpc-server-tls-cert=/certs/{{ include "common.secrets.key" (dict "existingSecret" .Values.storegateway.grpc.tls.existingSecret "key" "tls-cert") }}
            - --grpc-server-tls-key=/certs/{{ include "common.secrets.key" (dict "existingSecret" .Values.storegateway.grpc.tls.existingSecret "key" "tls-key") }}
            - --grpc-server-tls-client-ca=/certs/{{ include "common.secrets.key" (dict "existingSecret" .Values.storegateway.grpc.tls.existingSecret "key" "ca-cert") }}
            {{- end }}
            {{- if .Values.storegateway.extraFlags }}
            {{- .Values.storegateway.extraFlags | toYaml | nindent 12 }}
            {{- end }}
          ports:
            - name: http
              containerPort: 10902
              protocol: TCP
            - name: grpc
              containerPort: 10901
              protocol: TCP
          {{- if .Values.storegateway.livenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.storegateway.livenessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.storegateway.readinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.storegateway.readinessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.storegateway.resources }}
          resources: {{- toYaml .Values.storegateway.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: objstore-config
              mountPath: /conf
            - name: data
              mountPath: /data
            {{- if or .Values.storegateway.config .Values.storegateway.existingConfigmap }}
            - name: cache-config
              mountPath: /conf/cache
            {{- end }}
            {{- if .Values.storegateway.grpc.tls.enabled }}
            - name: tls-server
              mountPath: /certs
            {{- end }}
      volumes:
        - name: objstore-config
          secret:
            secretName: {{ include "thanos.objstoreSecretName" . }}
            {{- if .Values.existingObjstoreSecretItems }}
            items: {{- toYaml .Values.existingObjstoreSecretItems | nindent 14 }}
            {{- end }}
        {{- if or .Values.storegateway.config .Values.storegateway.existingConfigmap }}
        - name: cache-config
          configMap:
            name: {{ include "thanos.storegateway.configmapName" . }}
        {{- end }}
        {{- if .Values.storegateway.grpc.tls.enabled }}
        - name: tls-server
          secret:
            secretName: {{ include "common.secrets.name" (dict "existingSecret" .Values.storegateway.grpc.tls.existingSecret "defaultNameSuffix" "store-tls-server" "context" $) }}
        {{- end }}
  {{- if and .Values.storegateway.persistence.enabled .Values.storegateway.persistence.existingClaim }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ .Values.storegateway.persistence.existingClaim }}
  {{- else if not .Values.storegateway.persistence.enabled }}
        - name: data
          emptyDir: {}
  {{- else if and .Values.storegateway.persistence.enabled (not .Values.storegateway.persistence.existingClaim) }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
        {{- range .Values.storegateway.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.storegateway.persistence.size | quote }}
        {{- include "common.storage.class" (dict "persistence" .Values.storegateway.persistence "global" .Values.global) | nindent 8 }}
  {{- end }}
{{- end }}
